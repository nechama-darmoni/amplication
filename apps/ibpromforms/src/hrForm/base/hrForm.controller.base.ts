/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HrFormService } from "../hrForm.service";
import { HrFormCreateInput } from "./HrFormCreateInput";
import { HrForm } from "./HrForm";
import { HrFormFindManyArgs } from "./HrFormFindManyArgs";
import { HrFormWhereUniqueInput } from "./HrFormWhereUniqueInput";
import { HrFormUpdateInput } from "./HrFormUpdateInput";

export class HrFormControllerBase {
  constructor(protected readonly service: HrFormService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HrForm })
  async createHrForm(@common.Body() data: HrFormCreateInput): Promise<HrForm> {
    return await this.service.createHrForm({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HrForm] })
  @ApiNestedQuery(HrFormFindManyArgs)
  async hrForms(@common.Req() request: Request): Promise<HrForm[]> {
    const args = plainToClass(HrFormFindManyArgs, request.query);
    return this.service.hrForms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HrForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hrForm(
    @common.Param() params: HrFormWhereUniqueInput
  ): Promise<HrForm | null> {
    const result = await this.service.hrForm({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HrForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHrForm(
    @common.Param() params: HrFormWhereUniqueInput,
    @common.Body() data: HrFormUpdateInput
  ): Promise<HrForm | null> {
    try {
      return await this.service.updateHrForm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HrForm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHrForm(
    @common.Param() params: HrFormWhereUniqueInput
  ): Promise<HrForm | null> {
    try {
      return await this.service.deleteHrForm({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
